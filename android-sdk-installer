#!/usr/bin/env bash

#set -x
set +e

# It has backwards incompatible changes (i.e. completely deprecating android/emulator)

# SDK Tools
# Please refer to https://dl.google.com/android/repository/repository2-1.xml

# This is where all the links for the latest SDK Tools will be
# https://dl.google.com/android/repository/sdk-tools-linux_3952940.zip
#ANDROID_SDK_VERSION=26.0.2
SDK_FILE=sdk-tools
SDK_FILE=${SDK_FILE}-darwin-3859397.zip
SDK_URL=https://dl.google.com/android/repository/$SDK_FILE
export USE_SDK_WRAPPER=true
# Defaults
INSTALLER_DIR=$HOME/.android-sdk-installer

for i in "$@"
do
case $i in
    --dir=*)
    INSTALLER_DIR=`echo $i | sed 's/[-a-zA-Z0-9]*=//'`
    ;;
    *)
    # unknown option
    ;;
esac
done

INSTALLER_DIR=`stat -f "$INSTALLER_DIR"`

if test -n "$TRAVIS"; then
    JDK_VERSION_DIR="jdk1.8.0_112.jdk"
elif test -n "$CIRCLECI"; then
    JDK_VERSION_DIR="jdk1.8.0_144.jdk"
else
    # Hail Mary pass...
    JDK_VERSION_DIR="$(ls -1d /Library/Java/JavaVirtualMachines/*.jdk | tail -n 1)"
fi

export JAVA_HOME="/Library/Java/JavaVirtualMachines/${JDK_VERSION_DIR}/Contents/Home"

export ANDROID_HOME=$INSTALLER_DIR/android-sdk-macosx
export TOOLS_DIR=$ANDROID_HOME/tools
export ANDROID_STORE=$HOME/.android

SDK_MANAGER_PACKAGES_FILE=$INSTALLER_DIR/sdk_package.txt

echo "Cleaning SDK in $INSTALLER_DIR"
rm -rf $INSTALLER_DIR
mkdir -p $INSTALLER_DIR
mkdir -p $ANDROID_HOME
mkdir -p $TOOLS_DIR

# Setup environment file
echo "export ANDROID_HOME=$ANDROID_HOME" > $INSTALLER_DIR/env
echo "export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$TOOLS_DIR:\$PATH" >> $INSTALLER_DIR/env

# Accept all licences
mkdir -p "$ANDROID_HOME/licenses"
echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"

sdkmanager () {
  "$ANDROID_HOME/tools/bin/sdkmanager" "$@"
}

android () {
  "$ANDROID_HOME/tools/android" "$@"
}

download_sdktools() {
  echo "Downloading SDK Tools"
  curl -LsS $SDK_URL -o $INSTALLER_DIR/$SDK_FILE
}

extract_sdktools () {
  echo "Extracting SDK Tools"
  unzip -q -o -d $ANDROID_HOME $INSTALLER_DIR/$SDK_FILE
}

install_sdktools () {
  echo "Installing SDK Tools in $INSTALLER_DIR"
  download_sdktools
  extract_sdktools
}

overwrite_sdktools () {
  echo "Overwriting SDK Tools in $INSTALLER_DIR"
  rm -rf $TOOLS_DIR
  extract_sdktools
}

update_sdkmanager () {
  sdkmanager --update
}

licenses () {
  yes | sdkmanager --licenses
}

get_needed_packages () {
    cp $(dirname $0)/sdk_package.txt $SDK_MANAGER_PACKAGES_FILE
}

install_android () {
  echo "Installing SDK and other Android resources"
  sdkmanager --package_file=$SDK_MANAGER_PACKAGES_FILE --verbose
}

main () {
  install_sdktools
  licenses
  update_sdkmanager
  get_needed_packages
  overwrite_sdktools
  install_android
}

main
